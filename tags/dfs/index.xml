<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DFS on ngld</title>
    
    
    
    <link>/tags/dfs/</link>
    <description>Recent content in DFS on ngld</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Aug 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/dfs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Depth First Search</title>
      <link>/blogs/depth-first-search/</link>
      <pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/blogs/depth-first-search/</guid>
      <description>
        
          
          
          
        
        
        
          Depth First Search (DFS)#Definition#DFS used for traversing tree or graph. The backtracking is used for traversal. Travel from deepest node backtracks it parents. kinds of DFS in tree#Recursive (Time O(n), space O(n))#Preorder (root, left, right) void preorder(struct Node* node){if(node == nullptr) return;cout&amp;lt;&amp;lt;node-&amp;gt;val();preorder(node-&amp;gt;left);preorder(node-&amp;gt;right);} Inorder (left, root, right) void preorder(struct Node* node){if(node == nullptr) return;preorder(node-&amp;gt;left);cout&amp;lt;&amp;lt;node-&amp;gt;val();preorder(node-&amp;gt;right);} Postorder (left,right, root) void preorder(struct Node* node){if(node == nullptr) return;preorder(node-&amp;gt;left);preorder(node-&amp;gt;right);cout&amp;lt;&amp;lt;node-&amp;gt;val();} Iterative#preorder void iterativePreorder(TreeNode root){if(root == nullptr) return;stack&amp;lt;TreeNode&amp;gt; st;TreeNode cur = root;st.
          
        
        </description>
    </item>
    
  </channel>
</rss>